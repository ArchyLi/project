/////////////////////////////////////////////////////////////////////
// 二级空间配置器
//核心是内存池
//解决小块内存（内存缓存下来）
//两个指针指向一块空间开始和结束，给成char*方便，加一的时候方便。
//释放后回收管理是一个问题

//如果链表中没有内存，则去狭义的内存池中且内存，默认切20块大小，当然可以指针挪动只切一块
//，但是切20块更好因为在并发环境下两个线程访问同一个空间访问的是同一块
//因为这块空间是静态的放在静态区的，两个线程访问同一块则会出现争抢的问题，这个叫做竞争，可以认为都没有拿到
//此时要加锁，加锁的力度是下标不是整个数组


//STL容器申请不是分散的，是连续的，一个容器是连续的
template <bool threads, int inst>//第一个参数用在多线程的情况下，为了提高效率，不是多线程不需要加锁，第二个参数是预留参数
class __DefaultAllocTemplate
{
	union Obj//自由链表结构
	{
		Obj* _freeListLink;//是个指针数组
		char _client_data[1]; // 做硬件层优化穆卡不用管他
	};
	//匿名枚举没有域名字，所以在类里面可以直接用
	enum {__ALIGN = 8};//排序间隔//一定不能比8字节小，可以比8字节大，空间不重要类型最重要
	enum {__MAX_BYTES = 128};//最大值
	enum {__NFREELISTS = __MAX_BYTES/__ALIGN};//排序链大小16
public:
	static size_t FREE_LIST_INDEX(size_t n)//计算下标
	{
		//对齐
		return (n+__ALIGN-1)/__ALIGN -1;
	}

	static size_t ROUND_UP(size_t n)//取整//为什么快：因为少除一次整体跃迁到下一个区间
	{
		return (n+__ALIGN-1) & (~(__ALIGN-1));//+7整体跃迁到下一个区间与7取反，为了让它和8对齐
	}

	static char* ChunkAlloc(size_t n, size_t& nobjs)//为了改变第二个参数所以是引用
	{
		size_t totalBytes = nobjs*n;//nobjs是一个对象的大小n是个数
		size_t leftBytes = _endFree-_startFree;//算的是内存池有多少个内存
		__TRACE_DEBUG("内存池剩余%dbytes，需要申请20个对象，一共%dbytes\n", leftBytes, totalBytes);
		//三种情况
		//1.我要的大小
		//2.
		//3.
		if (leftBytes >= totalBytes)//剩余内存大于需要的的内存数目
		{
			__TRACE_DEBUG("向内存池申请了20个对象，内存池剩余%d bytes\n", leftBytes-totalBytes);

			char* ret = _startFree;
			_startFree += totalBytes;
			return ret;
		}
		else if (leftBytes >= n)//大于一个内存则还可以分配
		{
			nobjs = leftBytes/n;//剩余内存除以一个对象的大小，此处就更改了nobjs
			totalBytes = nobjs*n;
			char* ret = _startFree;
			_startFree += totalBytes;

			__TRACE_DEBUG("向内存池申请了%d个对象，内存池剩余%d bytes\n", nobjs,leftBytes-totalBytes);

			return ret;
		}
		else//一个对象大下都不够了所以要向系统中要
			//真的没有内存了则向系统中要，此处就复杂了
			//如果内存池中剩下的内存切多少放到自由链表的时候放最大的地方。
		{
			// 处理剩余的小块内存

			//尝试着处理小块内存用起来，把剩余的内存放入自由链表中，采用头插法
			if(leftBytes > 0)
			{
				size_t index = FREE_LIST_INDEX(leftBytes);

				((Obj*)_startFree)->_freeListLink = _freeList[index];
				_freeList[index] = (Obj*)_startFree;
			}

			// 向系统申请大块内存
			//想要的20个对象的大小，但是开辟的是2倍20个对象的大小，相当于开了40个还加了——heapsize/16,
			//heapsize是向系统已经申请多少的内存，因为申请的越多，表明向内存中需求的越多，但是除16不一定是八的倍数
			size_t bytesToGet = totalBytes*2+ROUND_UP(_heapSize>>4);

			//此时malloc有两种情况，一种成功一种失败，失败说明此时问题很严重，因为系统内存都没有了，
			//此处永远不会申请太大的内存，因为需要申请的字节数目最大就是128*20才2560，乘2才5000多字节，操作系统内存很大。
			//所以一般都是系统内存吃紧
			_startFree = (char*)malloc(bytesToGet);
			__TRACE_DEBUG("向系统malloc %dbytes\n", bytesToGet);
			if (_startFree == NULL) // 系统内存吃紧
			{
				//我们做我们能做的，但是不会尝试申请更小的内存，防止在多线程的情况下造成影响
				//挨着向后面找
				__TRACE_DEBUG("到更大自由链表中去申请\n");
				// 到更大的自由链表中去找
				size_t index = FREE_LIST_INDEX(n);
				for (; index < __NFREELISTS; ++index)
				{
					if (_freeList[index])
					{
						Obj* obj = _freeList[index];
						_freeList[index] = obj->_freeListLink;
						//把大的自由链表中的结点取出一块放入内存池中，此处是定义starFree和endFree
						_startFree = (char*)obj;
						_endFree = _startFree + (index+1)*__ALIGN;
						return ChunkAlloc(n, nobjs);//再拉掉一次自己，走上面的第二步，第二步会再次计算能切多少个
					}
				}

				// 山穷水尽，内存池没有，系统也没有，更大的自由链表也没有
				//调用一级空间配置器，为什么调用一级空间配置器？
				//因为没有办法了才调用一级空间配置器
				//为什么在上面不调用一级空间配置器要调用malloc?
				//因为如果系统中没有，内存池没有，但是自由链表中有，如果在上面调用一级空间配置器则走不下去
				_endFree = NULL;//假设不置为空则下面语句会抛异常，因为内存不是自己的，设置了后再次来到的时候可以重新申请狭义内存池
				_startFree = (char*)__MallocAllocTemplate<0>::Allocate(bytesToGet);
			}
			
			//此处表明malloc成功，递归调用了一次自己
			//_heapsize最开始的大小是0，每次申请的是0，记录的是现在已经向系统总的申请的字节数
			_heapSize += bytesToGet;
			_endFree = _startFree + bytesToGet;
			return ChunkAlloc(n, nobjs);//一定会走到第一种情况
		}
	}

	static void* Refill(size_t n)//切一段空间，一块用剩下的挂着
	{
		size_t nobjs = 20;//想要20个
		char* chunk = ChunkAlloc(n, nobjs);//此处的nobjs是引用,通过这个函数申请到想要的空间
		if (nobjs == 1)//如果只有一个直接返回
			return chunk;
		//此处不止一块，具体多少块由nobjs查看
		//所以返回一个剩下的挂着
		//使用大块内存构建自由链表
		Obj* cur = (Obj*)(chunk+n);//要取的第一块
		size_t index = FREE_LIST_INDEX(n);//算n的下标
		_freeList[index] = cur;

		__TRACE_DEBUG("挂%d个对象到freelist[%d],返回一个\n", nobjs-1, index);

		//[1-19)??????????
		for (size_t i = 0; i < nobjs-2; ++i)//此处走18次，第一个结点直接返回
		{
			Obj* next = (Obj*)((char*)cur+n);
			cur->_freeListLink = next;
			cur = next;
		}
		cur->_freeListLink = NULL;//最后一块置为空

		return chunk;
	}
	////////////////////////////////////////////
	static void* Allocate(size_t n)
	{
		__TRACE_DEBUG("向二级空间配置申请 %dbytes\n", n);

		if (n > __MAX_BYTES)
		{
			return __MallocAllocTemplate<0>::Allocate(n);//调用一级
		}
		
		size_t index = FREE_LIST_INDEX(n);//算下标

		// Lock()

		if (_freeList[index] == 0)
		{
			__TRACE_DEBUG("freeList[%d]下没有内存块对象\n", index);
			return Refill(ROUND_UP(n));//对齐之后在Refill
		}
		else
		{
			__TRACE_DEBUG("在freeList[%d]下取一个%dbytes对象\n", index, ROUND_UP(n));

			Obj* ret = _freeList[index];//指向第一块
			_freeList[index] = ret->_freeListLink;//指向ret下一块
			return ret;
		}

		// Unlock()
	}

	static void Deallocate(void *p, size_t n)
	{
		if (n > __MAX_BYTES)
		{
			return __MallocAllocTemplate<0>::Deallocate(p, n);
		}

		size_t index = FREE_LIST_INDEX(n);
		__TRACE_DEBUG("释放的内存对象挂到，freelist[%d]\n", index);

		((Obj*)p)->_freeListLink = _freeList[index];
		_freeList[index] = (Obj*)p;
	}

private:
	static Obj* _freeList[__NFREELISTS];//自由链表

	static char* _startFree;
	static char* _endFree;
	static size_t _heapSize;//向系统中申请了多少内存
};


template<bool threads, int inst>
typename __DefaultAllocTemplate<threads, inst>::Obj*
__DefaultAllocTemplate<threads, inst>::_freeList[__NFREELISTS] = {0};


template<bool threads, int inst>
char* __DefaultAllocTemplate<threads, inst>::_startFree = NULL;


template<bool threads, int inst>
char* __DefaultAllocTemplate<threads, inst>::_endFree = NULL;

template<bool threads, int inst>
size_t __DefaultAllocTemplate<threads, inst>::_heapSize = 0;


template<class T, class Alloc>
class SimpleAlloc {

public:
	static T* Allocate(size_t n)
	{ return 0 == n? 0 : (T*) Alloc::Allocate(n * sizeof (T)); }

	static T* Allocate(void)
	{ return (T*) Alloc::Allocate(sizeof (T)); }

	static void Deallocate(T *p, size_t n)
	{ if (0 != n) Alloc::Deallocate(p, n * sizeof (T)); }

	static void Deallocate(T *p)
	{ Alloc::Deallocate(p, sizeof (T)); }
};


void TestAlloc()
{
	for (size_t i = 0; i < 21; ++i)
	{
		__DefaultAllocTemplate<0, 0>::Allocate(10);
	}
}
