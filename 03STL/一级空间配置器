//一个函数指针，将void(*)重命名成HandlerFunc
typedef void(*HANDLE_FUNC)();

//所有的成员函数全是静态的变量
//所以只需要初始化__malloc_alloc_oom_hanlde
template <int inst>//inst这个参数实际上没有什么用处，它是预留参数
class _MllocAllocTemplate {
private:
	//此处使用头文件的函数指针
	static HANDLE_FUNC __malloc_alloc_oom_handle;
public:
	static void* Allocate(size_t n)
	{
		void* result = alloc(n);
		if (0 == result)
			//创建失败此时采用回调机制来处理，OOMMalloc是一个函数指针；
			result = OOMMalloc(n);
		return result;
	}
	static void Deallocate(void *p, size_t n)
	{
		free(p);
	}

	//此处是以及空间配置器的一种回调机制的实现方式
	//如果设置了回掉机制则调用，没有则抛出异常
	static void* OOMMalloc(size_t n)
	{
		//在SGI版本下是用for死循环实现
		while (1)
		{
			//申请失败抛出异常
			if (__malloc_alloc_oom_handle == 0)
			{
				throw bad_alloc();
				//在外部需要捕捉异常。
			}
			//此时有内存了malloc然后返回即可
			//不能轻易的设置这个函数，因为如果malloc失败了此时就死循环了
			//因为是函数指针
			__malloc_alloc_oom_handle();
			void* ret = malloc(n);
			if (ret)
				return ret;
		}
	}

	//参数是一个函数指针，返回值也是一个函数指针
	//它会返回一个旧的指，方便以后如果要使用原来的值的时候
	//在STL下是reallocate函数
	static HANDLE_FUNC SetMallocHandle(HANDLE_FUNC f)
	{
		HANDLE_FUNC old = __malloc_alloc_oom_handle;
		__malloc_alloc_oom_handle = f;
		return old;
	}
};
template<int inst>
//在类外初始化，此时需要指定是属于什么类的
HANDLE_FUNC _MllocAllocTemplate<inst>::__malloc_alloc_oom_handle = 0;//默认初始化为空

 //////////////
 //这里有一个不好的地方，回掉机制
 //////////////
 //////////////////////////////////////////////////////////////////////////
 //回调机制的实现主要为了防止申 请太大的空间或者空间不够的情况下
 //如果释放不出内存，则一直申请，所以很坑
 //所以我们采用申请太大的空间来模拟实现这样的场景
void TestAlloc()
{
	_MllocAllocTemplate<0>::Allocate(0x7fffffff);
}
